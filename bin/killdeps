#!/usr/bin/env php
<?php
/**
 * @author BurakBoz
 */
(PHP_VERSION_ID < 80000) && exit("This script requires PHP version 8.0.0 or higher.\n");

@error_reporting(0);
@set_time_limit(0);
@ini_set("memory_limit", -1);
@ini_set("display_errors", "off");

$start = time();
$deleteSize = 0;
$deletedItems = 0;
$scanDirCount = 0;
$checkHistory = [];

function addHistory($data, $max = 3): void
{
    global $checkHistory;
    count($checkHistory) > $max && array_shift($checkHistory);
    $checkHistory[] = $data;
}
function inHistory($data): bool
{
    global $checkHistory;
    return in_array($data, $checkHistory, true);
}

function dirSize($directory): int
{
    $size = 0;
    try {
        $it   = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($directory, FilesystemIterator::SKIP_DOTS),
            RecursiveIteratorIterator::SELF_FIRST
        );
        foreach ($it as $file)
        {
            $size += (int)$file->getSize();
        }
    } catch (Exception|Error)
    {
        // sizes are informative
    }
    return $size;
}

function humanSize(int|float|null $size, $mod = 1024): string
{
    if (is_null($size))
    {
        return "UnknownSize";
    }
    $size = abs($size);
    $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];

    $i = 0;
    while ($size > $mod) {
        $size /= $mod;
        $i++;
    }

    return round($size, 2) . ' ' . ($units[$i] ?? "UnknownUnitOfMeasurement");
}


function deleteDirectory($dir): bool
{
    global $deletedItems;
    if (!file_exists($dir))
    {
        return true;
    }
    if (!is_dir($dir))
    {
        return (unlink($dir) && $deletedItems++);
    }
    $items = array_diff(scandir($dir), [
        '.',
        '..',
    ]);
    foreach ($items as $item)
    {
        $path = $dir . DIRECTORY_SEPARATOR . $item;
        if (is_dir($path))
        {
            deleteDirectory($path) && $deletedItems++;
        }
        elseif(unlink($path) || (chown($path, get_current_user()) && unlink($path)))
        {
            $deletedItems++;
        }
    }
    return rmdir($dir);
}

function checkAndDelete($directory, $file, $folder, $lockFile, $useLockFile = false, $dryRun = false): bool
{
    global $deleteSize;
    $filePath   = $directory . DIRECTORY_SEPARATOR . $file;
    $folderPath = $directory . DIRECTORY_SEPARATOR . $folder;

    if (preg_match("/\/(node_modules|vendor)\//i", $folderPath))
    {
        return true;
    }

    if ($useLockFile)
    {
        $lockFilePath = $directory . DIRECTORY_SEPARATOR . $lockFile;
        if (file_exists($lockFilePath) && is_dir($folderPath))
        {
            echo "\033[33mWarning: $lockFilePath found. $folderPath folder will be deleted.\033[0m\n";
        }
        else
        {
            return true;
        }
    }

    if (file_exists($filePath) && is_dir($folderPath))
    {
        $directorySize = dirSize($folderPath);
        $directorySizeHumanReadable = humanSize($directorySize);
        echo "\033[32mFound: $folderPath : $directorySizeHumanReadable\033[0m\n";
        inHistory($folderPath) || $deleteSize += $directorySize;
        echo "\033[32mReclaimable space: ".humanSize($deleteSize)."\033[0m\n";
        if ($dryRun)
        {
            echo "\033[34mInfo: $folderPath ($directorySizeHumanReadable) will be deleted.\033[0m\n";
            addHistory($folderPath);
        }
        else
        {
            if (deleteDirectory($folderPath))
            {
                addHistory($folderPath);
                echo "\033[32mSuccess: $folderPath ($directorySizeHumanReadable) deleted.\033[0m\n";
                return false;
            }

            echo "\033[31mFailure: $folderPath ($directorySizeHumanReadable) could not be deleted.\033[0m\n";
        }
    }
    return true;
}

function checkAndDeleteFrom($directory, $useLockFile = false, $dryRun = false)
{
    checkAndDelete($directory, "composer.json", "vendor", "composer.lock", $useLockFile, $dryRun);
    checkAndDelete($directory, "package.json", "node_modules", "bun.lockb", $useLockFile, $dryRun) ||
    checkAndDelete($directory, "package.json", "node_modules", "yarn.lock", $useLockFile, $dryRun) ||
    checkAndDelete($directory, "package.json", "node_modules", "package-lock.json", $useLockFile, $dryRun);
}

function scanDirectory($directory, $useLockFile = false, $dryRun = false): void
{
    global $scanDirCount;
    if (is_dir($directory) && is_readable($directory))
    {
        checkAndDeleteFrom($directory, $useLockFile, $dryRun);
        $scan = @scandir($directory);
        if($scan)
        {
            foreach ($scan as $item)
            {
                if ($item === '.' || $item === '..')
                {
                    continue;
                }
                $path = $directory . DIRECTORY_SEPARATOR . $item;
                if (is_dir($path))
                {
                    $scanDirCount++;
                    // Skip recursive scan for vendor and node_modules paths
                    (!in_array(basename($path), ["vendor","node_modules"])) && checkAndDeleteFrom($path, $useLockFile, $dryRun);
                    scanDirectory($path, $useLockFile, $dryRun);
                }
            }
        }
    }
    else
    {
        echo "Unreadable path. '$directory'\n";
    }
}

function showHelp(): void
{
    echo <<<HELP

██   ██ ██ ██      ██      ██████  ███████ ██████  ███████ 
██  ██  ██ ██      ██      ██   ██ ██      ██   ██ ██      
█████   ██ ██      ██      ██   ██ █████   ██████  ███████ 
██  ██  ██ ██      ██      ██   ██ ██      ██           ██ 
██   ██ ██ ███████ ███████ ██████  ███████ ██      ███████ 
                                                           
                                                           
Author: Burak Boz - https://www.burakboz.net

Usage: killdeps [--only-locked] [--dry-run]  directory

This script recursively scans the provided directory and deletes 'vendor' and 'node_modules' directories if they exist.

php composer packages   : vendor
javascript npm packages : node_modules

Parameters:

    [--help] | [-h]   - If provided, the script shows help
    
    [--only-locked]   - If provided, the script only deletes directories if respective lock files 
                        ('composer.lock', 'bun.lockb', 'yarn.lock', 'package-lock.json') are present in the same directory.
    
    [--dry-run]       - If provided, the script performs a dry run. It scans the directories
                        and shows what it would delete, but it doesn't actually delete anything.
     
    directory         - The directory to scan and clean.

Example:
killdeps --only-locked --dry-run /path/to/project
This command would scan '/path/to/project' directory, and show what 'vendor' and 'node_modules' directories 
it would delete (only if respective lock files are present), but it wouldn't actually delete anything.

HELP;
    exit();
}

if ($argc < 2)
{
    echo <<<ERROR
\033[31mError: Please provide a directory.\033[0m
Try '\033[32mkilldeps --dry-run .\033[0m' command to scan current directory.
Try '\033[32mkilldeps --help\033[0m' command to show help

ERROR;
    exit();
}
in_array("--help", $argv, true) && showHelp();
in_array("-h", $argv, true) && showHelp();

$useLockFile = in_array("--only-locked", $argv, true);
$dryRun      = in_array("--dry-run", $argv, true);
$directory   = end($argv);
($directory === "." || $directory === "./") && getcwd() !== false && $directory = getcwd();

register_shutdown_function(static function (){
    global $deleteSize, $deletedItems, $start, $scanDirCount;
    echo "\n\n------\nTotal size: " . humanSize($deleteSize) . "\n";
    $deletedItems && print "Deleted files: " . number_format($deletedItems) . "\n";
    echo "Scanned directories: " . number_format($scanDirCount) . "\n";
    echo "Started at: " . date("d.m.Y H:i:s") . "\n";
    echo "Finished at: " . date("d.m.Y H:i:s", $start) . "\n";
    echo "Took: " . gmdate("H:i:s", time()-$start) . "\n";
});
scanDirectory($directory, $useLockFile, $dryRun);
